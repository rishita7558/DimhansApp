import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

class CravingSkillsScreen extends StatefulWidget {
  const CravingSkillsScreen({super.key});

  @override
  State<CravingSkillsScreen> createState() => _CravingSkillsScreenState();
}

class _CravingSkillsScreenState extends State<CravingSkillsScreen> {
  bool _isEnglish = true;

  void _openUrl(String url) async {
    final uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    }
  }

  // Language toggle widget
  Widget _buildLanguageToggle(ThemeData theme) {
    return Container(
      margin: const EdgeInsets.only(bottom: 24),
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
        color: theme.primaryColor.withOpacity(0.08),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: theme.primaryColor.withOpacity(0.2),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.language,
            size: 16,
            color: theme.primaryColor,
          ),
          const SizedBox(width: 8),
          Text(
            'English',
            style: TextStyle(
              fontSize: 13,
              fontWeight: FontWeight.w600,
              color: _isEnglish ? theme.primaryColor : Colors.grey,
            ),
          ),
          const SizedBox(width: 8),
          Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: theme.primaryColor.withOpacity(0.3),
              ),
            ),
            child: Transform.scale(
              scale: 0.7,
              child: Switch(
                value: _isEnglish,
                onChanged: (value) {
                  setState(() {
                    _isEnglish = value;
                  });
                },
                activeColor: theme.primaryColor,
                activeTrackColor: theme.primaryColor.withOpacity(0.3),
                inactiveThumbColor: Colors.grey,
                inactiveTrackColor: Colors.grey.withOpacity(0.3),
              ),
            ),
          ),
          const SizedBox(width: 8),
          Text(
            '‡≤ï‡≤®‡≥ç‡≤®‡≤°',
            style: TextStyle(
              fontSize: 13,
              fontWeight: FontWeight.w600,
              color: !_isEnglish ? theme.primaryColor : Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  // Content getters
  String get _pageTitle => _isEnglish 
    ? 'Craving Management Skills'
    : '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≤æ ‡≤ï‡≥å‡≤∂‡≤≤‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å';

  String get _understandingCravingsTitle => _isEnglish
    ? 'Understanding Cravings'
    : '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å';

  String get _understandingCravingsContent => _isEnglish
    ? 'Cravings are intense urges to drink alcohol that can feel overwhelming. They typically last 15-30 minutes and come in waves. Understanding that cravings are temporary and manageable is the first step to overcoming them.'
    : '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤¶‡≥ç‡≤Ø ‡≤ï‡≥Å‡≤°‡≤ø‡≤Ø‡≥Å‡≤µ ‡≤§‡≥Ä‡≤µ‡≥ç‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤Ü‡≤∏‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤Ö‡≤µ‡≥Å ‡≤Ö‡≤§‡≥ç‡≤Ø‡≤Ç‡≤§ ‡≤¨‡≤≤‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ø‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å. ‡≤Ö‡≤µ‡≥Å ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø 15-30 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤ï‡≤æ‡≤≤ ‡≤á‡≤∞‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤≤‡≥Ü‡≤ó‡≤≥ ‡≤∞‡≥Ç‡≤™‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¨‡≤∞‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü. ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≥Å ‡≤§‡≤æ‡≤§‡≥ç‡≤ï‡≤æ‡≤≤‡≤ø‡≤ï ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≥Ä‡≤Ø ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å ‡≤Ö‡≤µ‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ú‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ ‡≤Æ‡≥ä‡≤¶‡≤≤ ‡≤π‡≥Ü‡≤ú‡≥ç‡≤ú‡≥Ü.';

  String get _immediateTechniquesTitle => _isEnglish
    ? 'Immediate Craving Control Techniques'
    : '‡≤§‡≥ç‡≤µ‡≤∞‡≤ø‡≤§ ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å ‡≤®‡≤ø‡≤Ø‡≤Ç‡≤§‡≥ç‡≤∞‡≤£ ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≥Å';

  List<Map<String, String>> get _immediateTechniques => _isEnglish
    ? [
        {
          'title': 'Deep Breathing (4-7-8 Technique)',
          'description': 'Inhale for 4 seconds, hold for 7, exhale for 8. Repeat 4 times.',
          'icon': 'ü´Å'
        },
        {
          'title': 'Urge Surfing',
          'description': 'Observe the craving like a wave - it rises, peaks, and falls naturally.',
          'icon': 'üåä'
        },
        {
          'title': '5-4-3-2-1 Grounding',
          'description': 'Name 5 things you see, 4 you touch, 3 you hear, 2 you smell, 1 you taste.',
          'icon': 'üéØ'
        },
        {
          'title': 'Cold Water Splash',
          'description': 'Splash cold water on your face or hold ice cubes to shock your system.',
          'icon': 'üíß'
        },
        {
          'title': 'Physical Activity',
          'description': 'Do 10 jumping jacks, push-ups, or take a brisk 5-minute walk.',
          'icon': 'üèÉ‚Äç‚ôÇÔ∏è'
        },
        {
          'title': 'Call a Support Person',
          'description': 'Reach out to a trusted friend, family member, or sponsor immediately.',
          'icon': 'üìû'
        }
      ]
    : [
        {
          'title': '‡≤Ü‡≤≥‡≤µ‡≤æ‡≤¶ ‡≤â‡≤∏‡≤ø‡≤∞‡≤æ‡≤ü (4-7-8 ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞)',
          'description': '4 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥ ‡≤ï‡≤æ‡≤≤ ‡≤â‡≤∏‡≤ø‡≤∞‡≥Ü‡≤≥‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø, 7 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥ ‡≤ï‡≤æ‡≤≤ ‡≤π‡≤ø‡≤°‡≤ø‡≤¶‡≤ø‡≤°‡≤ø, 8 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥ ‡≤ï‡≤æ‡≤≤ ‡≤â‡≤∏‡≤ø‡≤∞‡≥Å ‡≤¨‡≤ø‡≤°‡≤ø. 4 ‡≤¨‡≤æ‡≤∞‡≤ø ‡≤™‡≥Å‡≤®‡≤∞‡≤æ‡≤µ‡≤∞‡≥ç‡≤§‡≤ø‡≤∏‡≤ø.',
          'icon': 'ü´Å'
        },
        {
          'title': '‡≤Ü‡≤∏‡≥Ü‡≤Ø ‡≤Ö‡≤≤‡≥Ü ‡≤∏‡≤µ‡≤æ‡≤∞‡≤ø',
          'description': '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤≤‡≥Ü‡≤Ø‡≤Ç‡≤§‡≥Ü ‡≤ó‡≤Æ‡≤®‡≤ø‡≤∏‡≤ø - ‡≤Ö‡≤¶‡≥Å ‡≤è‡≤∞‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü, ‡≤∂‡≤ø‡≤ñ‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤≤‡≥Å‡≤™‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥ç‡≤µ‡≤æ‡≤≠‡≤æ‡≤µ‡≤ø‡≤ï‡≤µ‡≤æ‡≤ó‡≤ø ‡≤á‡≤≥‡≤ø‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.',
          'icon': 'üåä'
        },
        {
          'title': '5-4-3-2-1 ‡≤®‡≥Ü‡≤≤‡≤ó‡≤ü‡≥ç‡≤ü‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü',
          'description': '‡≤®‡≥Ä‡≤µ‡≥Å ‡≤®‡≥ã‡≤°‡≥Å‡≤µ 5 ‡≤µ‡≤∏‡≥ç‡≤§‡≥Å‡≤ó‡≤≥‡≥Å, ‡≤Æ‡≥Å‡≤ü‡≥ç‡≤ü‡≥Å‡≤µ 4 ‡≤µ‡≤∏‡≥ç‡≤§‡≥Å‡≤ó‡≤≥‡≥Å, ‡≤ï‡≥á‡≤≥‡≥Å‡≤µ 3 ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø‡≤ó‡≤≥‡≥Å, ‡≤µ‡≤æ‡≤∏‡≤®‡≥Ü ‡≤Æ‡≤æ‡≤°‡≥Å‡≤µ 2 ‡≤µ‡≤∏‡≥ç‡≤§‡≥Å‡≤ó‡≤≥‡≥Å, ‡≤∞‡≥Å‡≤ö‡≤ø ‡≤®‡≥ã‡≤°‡≥Å‡≤µ 1 ‡≤µ‡≤∏‡≥ç‡≤§‡≥Å ‡≤π‡≥Ü‡≤∏‡≤∞‡≤ø‡≤∏‡≤ø.',
          'icon': 'üéØ'
        },
        {
          'title': '‡≤§‡≤£‡≥ç‡≤£‡≤®‡≥Ü‡≤Ø ‡≤®‡≥Ä‡≤∞‡≤ø‡≤® ‡≤∏‡≤ø‡≤Ç‡≤™‡≤°‡≤ø‡≤∏‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü',
          'description': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≥Å‡≤ñ‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü ‡≤§‡≤£‡≥ç‡≤£‡≤®‡≥Ü‡≤Ø ‡≤®‡≥Ä‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤ø‡≤Ç‡≤™‡≤°‡≤ø‡≤∏‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≥ç‡≤Ø‡≤µ‡≤∏‡≥ç‡≤•‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤ò‡≤æ‡≤§‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤≤‡≥Å ‡≤Æ‡≤Ç‡≤ú‡≥Å‡≤ó‡≤°‡≥ç‡≤°‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≤ø‡≤°‡≤ø‡≤¶‡≤ø‡≤°‡≤ø.',
          'icon': 'üíß'
        },
        {
          'title': '‡≤¶‡≥à‡≤π‡≤ø‡≤ï ‡≤ö‡≤ü‡≥Å‡≤µ‡≤ü‡≤ø‡≤ï‡≥Ü',
          'description': '10 ‡≤ú‡≤Ç‡≤™‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤ú‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç‚Äå‡≤ó‡≤≥‡≥Å, ‡≤™‡≥Å‡≤∑‡≥ç-‡≤Ö‡≤™‡≥ç‚Äå‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ 5 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤µ‡≥á‡≤ó‡≤¶ ‡≤®‡≤°‡≤ø‡≤ó‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø.',
          'icon': 'üèÉ‚Äç‚ôÇÔ∏è'
        },
        {
          'title': '‡≤¨‡≥Ü‡≤Ç‡≤¨‡≤≤ ‡≤µ‡≥ç‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤∞‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø',
          'description': '‡≤§‡≥ç‡≤µ‡≤∞‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤®‡≤Ç‡≤¨‡≤≤‡≤∞‡≥ç‡≤π ‡≤∏‡≥ç‡≤®‡≥á‡≤π‡≤ø‡≤§, ‡≤ï‡≥Å‡≤ü‡≥Å‡≤Ç‡≤¨‡≤¶ ‡≤∏‡≤¶‡≤∏‡≥ç‡≤Ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≥ç‡≤™‡≤æ‡≤®‡≥ç‡≤∏‡≤∞‡≥ç‚Äå‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø.',
          'icon': 'üìû'
        }
      ];

  String get _longTermStrategiesTitle => _isEnglish
    ? 'Long-term Craving Management Strategies'
    : '‡≤¶‡≥Ä‡≤∞‡≥ç‡≤ò‡≤ï‡≤æ‡≤≤‡≤ø‡≤ï ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≤æ ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≥Å';

  List<Map<String, String>> get _longTermStrategies => _isEnglish
    ? [
        {
          'title': 'Identify Triggers',
          'description': 'Keep a journal to track what situations, emotions, or people trigger your cravings.',
          'icon': 'üìù'
        },
        {
          'title': 'Develop Healthy Routines',
          'description': 'Create daily schedules with exercise, hobbies, and social activities to replace drinking time.',
          'icon': 'üìÖ'
        },
        {
          'title': 'Build a Support Network',
          'description': 'Join support groups, maintain relationships with sober friends, and involve family in your recovery.',
          'icon': 'üë•'
        },
        {
          'title': 'Practice Mindfulness',
          'description': 'Learn meditation, yoga, or other mindfulness techniques to manage stress and emotions.',
          'icon': 'üßò‚Äç‚ôÇÔ∏è'
        },
        {
          'title': 'Avoid High-Risk Situations',
          'description': 'Stay away from bars, parties, or social events where alcohol is the main focus.',
          'icon': '‚ö†Ô∏è'
        },
        {
          'title': 'Have a Relapse Prevention Plan',
          'description': 'Create a detailed plan for what to do if you experience strong cravings or feel like drinking.',
          'icon': 'üõ°Ô∏è'
        }
      ]
    : [
        {
          'title': '‡≤ï‡≤æ‡≤∞‡≤£‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤ø',
          'description': '‡≤Ø‡≤æ‡≤µ ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≥Å, ‡≤≠‡≤æ‡≤µ‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤ú‡≤®‡≤∞‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤ö‡≥ã‡≤¶‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤°‡≥à‡≤∞‡≤ø ‡≤á‡≤°‡≤ø.',
          'icon': 'üìù'
        },
        {
          'title': '‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø‡≤ï‡≤∞ ‡≤¶‡≤ø‡≤®‡≤ö‡≤∞‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤∏‡≤ø',
          'description': '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤™‡≤æ‡≤®‡≤¶ ‡≤∏‡≤Æ‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≤≤‡≥Å ‡≤µ‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤æ‡≤Æ, ‡≤π‡≤µ‡≥ç‡≤Ø‡≤æ‡≤∏‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤ú‡≤ø‡≤ï ‡≤ö‡≤ü‡≥Å‡≤µ‡≤ü‡≤ø‡≤ï‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤¶‡≥à‡≤®‡≤Ç‡≤¶‡≤ø‡≤® ‡≤µ‡≥á‡≤≥‡≤æ‡≤™‡≤ü‡≥ç‡≤ü‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø.',
          'icon': 'üìÖ'
        },
        {
          'title': '‡≤¨‡≥Ü‡≤Ç‡≤¨‡≤≤ ‡≤ú‡≤æ‡≤≤‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤Æ‡≤ø‡≤∏‡≤ø',
          'description': '‡≤¨‡≥Ü‡≤Ç‡≤¨‡≤≤ ‡≤ó‡≥Å‡≤Ç‡≤™‡≥Å‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø, ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤∞‡≤π‡≤ø‡≤§ ‡≤∏‡≥ç‡≤®‡≥á‡≤π‡≤ø‡≤§‡≤∞‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤Ø‡≥ç‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥Å‡≤®‡≤∞‡≥ç‡≤µ‡≤∏‡≤§‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≥Å‡≤ü‡≥Å‡≤Ç‡≤¨‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤í‡≤≥‡≤ó‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø.',
          'icon': 'üë•'
        },
        {
          'title': '‡≤∏‡≥ç‡≤Æ‡≤∞‡≤£‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤≠‡≥ç‡≤Ø‡≤æ‡≤∏ ‡≤Æ‡≤æ‡≤°‡≤ø',
          'description': '‡≤í‡≤§‡≥ç‡≤§‡≤° ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤≠‡≤æ‡≤µ‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤ø‡≤∏‡≤≤‡≥Å ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®, ‡≤Ø‡≥ã‡≤ó ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤á‡≤§‡≤∞ ‡≤∏‡≥ç‡≤Æ‡≤∞‡≤£‡≥Ü ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤≤‡≤ø‡≤Ø‡≤ø‡≤∞‡≤ø.',
          'icon': 'üßò‚Äç‚ôÇÔ∏è'
        },
        {
          'title': '‡≤Ö‡≤™‡≤æ‡≤Ø‡≤ï‡≤æ‡≤∞‡≤ø ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤™‡≥ç‡≤™‡≤ø‡≤∏‡≤ø',
          'description': '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤µ‡≥Å ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤ó‡≤Æ‡≤®‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≥Å‡≤µ ‡≤¨‡≤æ‡≤∞‡≥ç‚Äå‡≤ó‡≤≥‡≥Å, ‡≤™‡≤æ‡≤∞‡≥ç‡≤ü‡≤ø‡≤ó‡≤≥‡≥Å ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤ú‡≤ø‡≤ï ‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø‡≤ï‡≥ç‡≤∞‡≤Æ‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤¶‡≥Ç‡≤∞‡≤µ‡≤ø‡≤∞‡≤ø.',
          'icon': '‚ö†Ô∏è'
        },
        {
          'title': '‡≤Æ‡≤∞‡≥Å‡≤™‡≤§‡≤® ‡≤§‡≤°‡≥Ü‡≤ó‡≤ü‡≥ç‡≤ü‡≥Å‡≤µ ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤∞‡≤ø',
          'description': '‡≤®‡≥Ä‡≤µ‡≥Å ‡≤¨‡≤≤‡≤µ‡≤æ‡≤¶ ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ø‡≤∏‡≤ø‡≤¶‡≤∞‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤ï‡≥Å‡≤°‡≤ø‡≤Ø‡≤≤‡≥Å ‡≤≠‡≤æ‡≤µ‡≤ø‡≤∏‡≤ø‡≤¶‡≤∞‡≥Ü ‡≤è‡≤®‡≥Å ‡≤Æ‡≤æ‡≤°‡≤¨‡≥á‡≤ï‡≥Ü‡≤Ç‡≤¶‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø.',
          'icon': 'üõ°Ô∏è'
        }
      ];

  String get _emergencyPlanTitle => _isEnglish
    ? 'Emergency Craving Response Plan'
    : '‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å ‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü';

  String get _emergencyPlanContent => _isEnglish
    ? 'When cravings feel overwhelming, follow this emergency plan:\n\n1. STOP - Pause and take 3 deep breaths\n2. DISTANCE - Remove yourself from the situation\n3. DISTRACT - Engage in a healthy activity\n4. DELAY - Wait 15 minutes before making any decision\n5. DECIDE - Choose your health over temporary relief'
    : '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å‡≤ó‡≤≥‡≥Å ‡≤Ö‡≤§‡≥ç‡≤Ø‡≤Ç‡≤§ ‡≤¨‡≤≤‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ø‡≤∏‡≤ø‡≤¶‡≤æ‡≤ó, ‡≤à ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤®‡≥Å‡≤∏‡≤∞‡≤ø‡≤∏‡≤ø:\n\n1. ‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø - ‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å 3 ‡≤Ü‡≤≥‡≤µ‡≤æ‡≤¶ ‡≤â‡≤∏‡≤ø‡≤∞‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø\n2. ‡≤¶‡≥Ç‡≤∞‡≤µ‡≤ø‡≤∞‡≤ø - ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø\n3. ‡≤ó‡≤Æ‡≤® ‡≤§‡≤ø‡≤∞‡≥Å‡≤ó‡≤ø‡≤∏‡≤ø - ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø‡≤ï‡≤∞ ‡≤ö‡≤ü‡≥Å‡≤µ‡≤ü‡≤ø‡≤ï‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤§‡≥ä‡≤°‡≤ó‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø\n4. ‡≤µ‡≤ø‡≤≥‡≤Ç‡≤¨ - ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤®‡≤ø‡≤∞‡≥ç‡≤ß‡≤æ‡≤∞ ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤µ ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥Å 15 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤ï‡≤æ‡≤Ø‡≤ø‡≤∞‡≤ø\n5. ‡≤®‡≤ø‡≤∞‡≥ç‡≤ß‡≤∞‡≤ø‡≤∏‡≤ø - ‡≤§‡≤æ‡≤§‡≥ç‡≤ï‡≤æ‡≤≤‡≤ø‡≤ï ‡≤™‡≤∞‡≤ø‡≤π‡≤æ‡≤∞‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø';

  String get _watchLearnTitle => _isEnglish
    ? 'Watch & Learn'
    : '‡≤®‡≥ã‡≤°‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ï‡≤≤‡≤ø‡≤Ø‡≤ø‡≤∞‡≤ø';

  List<Map<String, String>> get _videos => [
    {
      'title': _isEnglish ? 'Urge Surfing Technique' : '‡≤Ü‡≤∏‡≥Ü‡≤Ø ‡≤Ö‡≤≤‡≥Ü ‡≤∏‡≤µ‡≤æ‡≤∞‡≤ø ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞',
      'url': 'https://www.youtube.com/watch?v=5h3CtiG99yE&t=2s'
    },
    {
      'title': _isEnglish ? 'Breathing Exercise for Craving Control' : '‡≤Æ‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤π‡≥Å‡≤ö‡≥ç‡≤ö‡≥Å ‡≤®‡≤ø‡≤Ø‡≤Ç‡≤§‡≥ç‡≤∞‡≤£‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤â‡≤∏‡≤ø‡≤∞‡≤æ‡≤ü ‡≤µ‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤æ‡≤Æ',
      'url': 'https://www.youtube.com/watch?v=FJJazKtH_9I'
    },
    {
      'title': _isEnglish ? 'Meditation for Addiction Recovery' : '‡≤µ‡≥ç‡≤Ø‡≤∏‡≤® ‡≤™‡≥Å‡≤®‡≤∞‡≥ç‡≤µ‡≤∏‡≤§‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‡≤∏‡≥ç‡≤Æ‡≤∞‡≤£‡≥Ü',
      'url': 'https://youtu.be/jfhMlfxaIvw?si=Tg9GD4eQu8AMsSm1'
    },
    {
      'title': _isEnglish ? 'Relapse Prevention Strategies' : '‡≤Æ‡≤∞‡≥Å‡≤™‡≤§‡≤® ‡≤§‡≤°‡≥Ü‡≤ó‡≤ü‡≥ç‡≤ü‡≥Å‡≤µ ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≥Å',
      'url': 'https://youtu.be/Z1jtmFlNB-c?si=cNJ3Z_fV11QdBbcW'
    }
  ];

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: const Color(0xFFF3EFFF),
      body: ListView(
        padding: const EdgeInsets.all(20),
        children: [
          _buildLanguageToggle(theme),
          
          // Page Title
          Text(
            _pageTitle,
            style: theme.textTheme.headlineMedium?.copyWith(
              color: theme.primaryColor,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 24),

          // Understanding Cravings Section
          _buildSectionCard(
            theme,
            title: _understandingCravingsTitle,
            content: _understandingCravingsContent,
            icon: Icons.psychology,
            color: Colors.blue,
          ),
          const SizedBox(height: 20),

          // Immediate Techniques Section
          _buildTechniquesSection(
            theme,
            title: _immediateTechniquesTitle,
            techniques: _immediateTechniques,
            icon: Icons.flash_on,
            color: Colors.orange,
          ),
          const SizedBox(height: 20),

          // Long-term Strategies Section
          _buildTechniquesSection(
            theme,
            title: _longTermStrategiesTitle,
            techniques: _longTermStrategies,
            icon: Icons.trending_up,
            color: Colors.green,
          ),
          const SizedBox(height: 20),

          // Emergency Plan Section
          _buildSectionCard(
            theme,
            title: _emergencyPlanTitle,
            content: _emergencyPlanContent,
            icon: Icons.emergency,
            color: Colors.red,
          ),
          const SizedBox(height: 20),

          // Watch & Learn Section
          _buildVideoSection(theme),
        ],
      ),
    );
  }

  Widget _buildSectionCard(ThemeData theme, {
    required String title,
    required String content,
    required IconData icon,
    required Color color,
  }) {
    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              color.withOpacity(0.1),
              color.withOpacity(0.05),
            ],
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: color, size: 24),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: color,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              content,
              style: const TextStyle(
                fontSize: 16,
                height: 1.5,
                color: Colors.black87,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTechniquesSection(ThemeData theme, {
    required String title,
    required List<Map<String, String>> techniques,
    required IconData icon,
    required Color color,
  }) {
    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              color.withOpacity(0.1),
              color.withOpacity(0.05),
            ],
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: color, size: 24),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: color,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...techniques.map((technique) => Container(
              margin: const EdgeInsets.only(bottom: 12),
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.7),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: color.withOpacity(0.3)),
              ),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    technique['icon']!,
                    style: const TextStyle(fontSize: 24),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          technique['title']!,
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: color,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          technique['description']!,
                          style: const TextStyle(
                            fontSize: 14,
                            height: 1.4,
                            color: Colors.black87,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            )).toList(),
          ],
        ),
      ),
    );
  }

  Widget _buildVideoSection(ThemeData theme) {
    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Colors.purple.withOpacity(0.1),
              Colors.purple.withOpacity(0.05),
            ],
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.play_circle_fill, color: Colors.purple, size: 24),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    _watchLearnTitle,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.purple,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ..._videos.map((video) => Container(
              margin: const EdgeInsets.only(bottom: 8),
              child: Card(
                child: ListTile(
                  leading: const Icon(Icons.play_circle_fill, color: Colors.purple),
                  title: Text(
                    video['title']!,
                    style: const TextStyle(fontWeight: FontWeight.w500),
                  ),
                  subtitle: Text(
                    video['url']!,
                    style: const TextStyle(color: Colors.blue, fontSize: 12),
                  ),
                  onTap: () => _openUrl(video['url']!),
                ),
              ),
            )).toList(),
          ],
        ),
      ),
    );
  }
} 